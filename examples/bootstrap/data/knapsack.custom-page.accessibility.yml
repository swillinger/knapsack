id: accessibility
title: Accessibility
slices:
  - id: tpPsDUfg1
    blockId: markdown-slice
    data:
      md: >-
        A brief overviews of Bootstrap’s features and limitations for the
        creation of accessible content.


        ### Overview and Limitations


        The overall accessibility of any project built with Bootstrap depends in
        large part on the author’s markup, additional styling, and scripting
        they’ve included. However, provided that these have been implemented
        correctly, it should be perfectly possible to create websites and
        applications with Bootstrap that fulfill WCAG 2.0 (A/AA/AAA), Section
        508 and similar accessibility standards and requirements.


        ### Structural markup


        Bootstrap’s styling and layout can be applied to a wide range of markup
        structures. This documentation aims to provide developers with best
        practice examples to demonstrate the use of Bootstrap itself and
        illustrate appropriate semantic markup, including ways in which
        potential accessibility concerns can be addressed.


        ### Interactive components


        Bootstrap’s interactive components—such as modal dialogs, dropdown menus
        and custom tooltips—are designed to work for touch, mouse and keyboard
        users. Through the use of relevant WAI-ARIA roles and attributes, these
        components should also be understandable and operable using assistive
        technologies (such as screen readers).


        Because Bootstrap’s components are purposely designed to be fairly
        generic, authors may need to include further ARIA roles and attributes,
        as well as JavaScript behavior, to more accurately convey the precise
        nature and functionality of their component. This is usually noted in
        the documentation.


        ### Color contrast


        Most colors that currently make up Bootstrap’s default palette—used
        throughout the framework for things such as button variations, alert
        variations, form validation indicators—lead to insufficient color
        contrast (below the recommended WCAG 2.0 color contrast ratio of 4.5:1)
        when used against a light background. Authors will need to manually
        modify/extend these default colors to ensure adequate color contrast
        ratios.


        ### Visually hidden content


        Content which should be visually hidden, but remain accessible to
        assistive technologies such as screen readers, can be styled using the
        .sr-only class. This can be useful in situations where additional visual
        information or cues (such as meaning denoted through the use of color)
        need to also be conveyed to non-visual users.


        ```html

        <p class="text-danger">
          <span class="sr-only">Danger: </span>
          This action is not reversible
        </p>

        ```


        For visually hidden interactive controls, such as traditional “skip”
        links, .sr-only can be combined with the .sr-only-focusable class. This
        will ensure that the control becomes visible once focused (for sighted
        keyboard users).


        ```html

        <a class="sr-only sr-only-focusable" href="#content">Skip to main
        content</a>

        ```


        ### Additional resources


        - Web Content Accessibility Guidelines (WCAG) 2.0

        - The A11Y Project

        - MDN accessibility documentation

        - Tenon.io Accessibility Checker

        - Colour Contrast Analyser (CCA)

        - “HTML Codesniffer” bookmarklet for identifying accessibility issues
